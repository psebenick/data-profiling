use role LAB_DEVELOPER;
--create database if not exists NYC_Taxi;
Use database lab_db;
use schema information_schema;
create schema if not exists NYC_Taxi;
use schema Admin;

create or replace  view all_tables
as
/* returns all tables , some attributes and storage metrics for all tables in the account */
with T as 
(
select table_catalog as database_name,table_schema as schema_name,table_name,table_id,table_type,is_transient,is_iceberg,row_count,cast(deleted as date) as deleted_dt
from snowflake.account_usage.tables
where table_type <> 'VIEW'
)
,
S as
(
select 
id,table_catalog,table_schema,table_name,active_bytes,failsafe_bytes,time_travel_bytes,deleted
from snowflake.account_usage.table_storage_metrics 
where active_bytes+failsafe_bytes+time_travel_bytes >0  or deleted = 'FALSE'
)
select T.*,S.active_bytes,S.failsafe_bytes,time_travel_bytes,deleted
from T inner join S on T.table_id=S.id
order by 1,2,3;

Create or replace view database_tables 
AS
with T as 
(
select table_catalog as database_name,table_schema as schema_name,table_name,table_type,is_transient,is_iceberg,row_count
from information_schema.tables
where table_type <> 'VIEW'
)
,
S as
(
select 
table_catalog,table_schema,table_name,sum(active_bytes) as active_bytes,sum(failsafe_bytes) as failsafe_bytes,sum(time_travel_bytes) as time_travel_bytes
from information_schema.table_storage_metrics 
group by 1,2,3  
)
select T.*,S.active_bytes,S.failsafe_bytes,S.time_travel_bytes
from T inner join S on T.database_name=S.table_catalog and T.schema_name=S.table_schema and T.Table_name=S.table_name
order by 1,2,3;

select * from all_tables order by 1,2,3;
select * from database_tables order by 1,2,3;

grant select on view all_tables to role sysadmin;
grant usage on schema lab_db.admin to role sysadmin;
grant usage on database lab_db to role sysadmin;

CREATE OR REPLACE PROCEDURE SP_Data_Profile (DATABASE_NAME varchar, SCHEMA_NAME varchar, TABLE_NAME varchar)
    COPY GRANTS -- ensures grants are re-applied if the proc is replaced/modified
    RETURNS object 
    LANGUAGE SQL
    --RETURNS NULL ON NULL INPUT -- will not call stored proc if any input is null and null return
    CALLED on NULL INPUT -- will always call stored proc with null inputs
    COMMENT = 'Obtains column metrics for a given table.  Creates a temporary table (data_profile)containing some a data profile of the selected tables.  min,max,distinct count and null count for each column of the tables '
    EXECUTE AS CALLER  -- CALLER/OWNER execution rights
    /*
    Description: Obtains column metrics for a given table.  Creates a temporary table (current schema.data_profile) containing a data profile of the specified table.
    min,max,distinct count and null count for each column of the tables 
  
    Usage : Call SP_Data_Profile(Database_Name , Schema_name , Table_name );
    Parameters: 
        Database_Name
        Schema_Name
        Table_Name
    Returns: a JSON object of the table containing the Database_name,Schema_name,Table_name and the columns and metrics
    
    Change Log: 
        2024-02-06:Paul S inintial version     
    */
    AS
    DECLARE
        c1 cursor for  -- cursor to hold list of tables/columns to profile
            select 
                --table_catalog, table_schema,table_name
                column_name,data_type 
            from information_schema.columns
            where table_schema ilike ? and  table_name ilike ?;
        sql_stmt text;
        insertcount integer :=0;
        column_name varchar;
        data_type varchar;
        row_count integer;
        distinct_count integer;
        null_count integer;
        max_value varchar;
        min_value varchar;
        error_msg varchar;
        profile_object object;
    BEGIN
        SYSTEM$LOG('debug', 'creating data_profile table');

        CREATE OR REPLACE TEMPORARY TABLE Data_Profile
        ( database_name varchar,schema_name varchar,table_name varchar ,column_name varchar ,data_type varchar, row_count integer ,distinct_count integer ,null_count integer ,min_value varchar ,max_value varchar);
        
        SYSTEM$LOG('debug', 'getting schema');
        OPEN  C1 USING (schema_name,table_name);
        FOR record in C1 DO
            column_name := record.column_name;
            data_type := record.data_type;

            sql_stmt := 'insert into data_profile 
                select ''' || :database_name || ''', '''|| :schema_name || ''', ''' || :table_name || ''', ''' || :column_name  || ''', ''' || :data_type 
                || ''' ,count(*)' || ', count(distinct ' || :column_name || '), count(*)-count(' || :column_name || '), '
                || ' min( ' || :column_name || '), max(' || :column_name || ') '
                || ' from ' || database_name || '.' || schema_name || '.' || table_name ; 
                
            --SYSTEM$LOG('debug', sql_stmt);
            EXECUTE IMMEDIATE sql_stmt;
            insertcount := insertcount + 1;
        END FOR;
       
        SYSTEM$LOG('debug', 'inserted ' || insertcount::varchar || ' rows into data_profile');
          /* lets return the the profile as a JSON object.    we could easily return this as a table  ... not sure which is best */
          select object_construct (
                'Database_name',database_name,
                'Schema_name',schema_name,
                'Table_name',table_name,
                'Table_row_count', max(row_count),
                'column_count', count(*),
                'columns',array_agg(object_construct (
                    'column_name',column_name,
                    'data_type', data_type,
                    'distinct_count', distinct_count,
                    'null_count',null_count,
                    'min_value', min_value,
                    'max_value', max_value
                    ))
                )  into :profile_object
                from data_profile
                group by database_name,schema_name,table_name;
    RETURN profile_object;
EXCEPTION
    WHEN OTHER  /*OR STATEMENT_ERROR OR EXPRESSION_ERROR*/ THEN
        error_msg := SQLSTATE||':'||SQLCODE||':'||SQLERRM;
        SYSTEM$LOG('error', error_msg);
        RAISE;
    END;

    Call SP_Data_Profile('Lab_DB','NYC_TAXI','GREEN_TRIPDATA');
    Call SP_Data_Profile('Lab_DB','NYC_TAXI','yellow_TRIPDATA');
    Call SP_Data_Profile('Lab_DB','NYC_TAXI','NYC_Weather');
    Call SP_Data_Profile('Lab_DB','CITIBIKE','TRIPS');

    alter session set log_level='debug';

    select * from data_profile;


    With T as
    (
    select object_construct (
    'Database_name',database_name,
    'Schema_name',schema_name,
    'Table_name',table_name,
    'Table_row_count', max(row_count),
    'column_count', count(*),
    'columns',array_agg(object_construct (
        'column_name',column_name,
        'data_type', data_type,
        'distinct_count', distinct_count,
        'null_count',null_count,
        'min_value', min_value,
        'max_value', max_value
        )) 
    ) as v
    from data_profile
    group by database_name,schema_name,table_name
    )
    select
    v:Database_name::varchar, v:Schema_name::varchar, v:Table_name::varchar, v:Table_row_count::integer, 
    C.value:column_name,C.value:data_type,C.value:distinct_count
    from T
    ,lateral flatten(input=>v:columns) C
    
